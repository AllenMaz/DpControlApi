<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DpControl</name>
    </assembly>
    <members>
        <member name="M:DpControl.Controllers.ManageController.GetUserPageData">
            <summary>
            Get User Paging Data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.ManageController.GetRolePageData">
            <summary>
            Get Role Paging Data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.AlarmMessageController.AddAsync(DpControl.Domain.Models.AlarmMessageAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.AlarmMessageController.GetByAlarmMessageIdAsync(System.Int32)">
            <summary>
            Search data by AlarmMessageId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.AlarmMessageController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.AlarmMessageController.DeleteByAlarmMessageIdAsync(System.Int32)">
            <summary>
            Delete data by AlarmMessageId
            </summary>
            <param name="alarmMessageId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.AlarmMessageController.UpdateAsync(System.Int32,DpControl.Domain.Models.AlarmMessageUpdateModel)">
            <summary>
            Edit data by AlarmMessageId
            </summary>
            <param name="AlarmMessageId"></param>
            <param name="AlarmMessage"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.AlarmsController.AddAsync(DpControl.Domain.Models.AlarmAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.AlarmsController.GetByAlarmIdAsync(System.Int32)">
            <summary>
            Search data by AlarmId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.AlarmsController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.AlarmsController.DeleteByAlarmIdAsync(System.Int32)">
            <summary>
            Delete data by AlarmId
            </summary>
            <param name="alarmId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.DevicesController.AddAsync(DpControl.Domain.Models.DeviceAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.DevicesController.GetBySceneIdAsync(System.Int32)">
            <summary>
            Search data by DeviceId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.DevicesController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.DevicesController.UpdateAsync(System.Int32,DpControl.Domain.Models.DeviceUpdateModel)">
            <summary>
            Edit data by deviceId
            </summary>
            <param name="deviceId"></param>
            <param name="Location"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.DevicesController.DeleteByDeviceIdAsync(System.Int32)">
            <summary>
            Delete data by DeviceId
            </summary>
            <param name="DeviceId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.GroupLocationsController.AddAsync(DpControl.Domain.Models.GroupLocationAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.GroupLocationsController.GetByGroupLocationIdAsync(System.Int32)">
            <summary>
            Search data by GroupLocationId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.GroupLocationsController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.GroupLocationsController.DeleteByGroupLocationIdAsync(System.Int32)">
            <summary>
            Delete data by GroupLocationId
            </summary>
            <param name="groupLocationId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.GroupsController.AddAsync(DpControl.Domain.Models.GroupAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.GroupsController.GetByProjectIdAsync(System.Int32)">
            <summary>
            Search data by GroupId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.GroupsController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.GroupsController.UpdateAsync(System.Int32,DpControl.Domain.Models.GroupUpdateModel)">
            <summary>
            Edit data by GroupId
            </summary>
            <param name="GroupId"></param>
            <param name="Group"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.GroupsController.DeleteByGroupIdIdAsync(System.Int32)">
            <summary>
            Delete data by GroupId
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.HolidaysController.AddAsync(DpControl.Domain.Models.HolidayAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.HolidaysController.GetByHolidayIdAsync(System.Int32)">
            <summary>
            Search data by holidayId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.HolidaysController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.HolidaysController.UpdateAsync(System.Int32,DpControl.Domain.Models.HolidayUpdateModel)">
            <summary>
            Edit data by holidayId
            </summary>
            <param name="customerNo"></param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.HolidaysController.DeleteByHolidayIdAsync(System.Int32)">
            <summary>
            Delete data by HolidayId
            </summary>
            <param name="customerId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LocationsController.AddAsync(DpControl.Domain.Models.LocationAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LocationsController.GetBySceneIdAsync(System.Int32)">
            <summary>
            Search data by LocationId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LocationsController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LocationsController.UpdateAsync(System.Int32,DpControl.Domain.Models.LocationUpdateModel)">
            <summary>
            Edit data by locationId
            </summary>
            <param name="locationId"></param>
            <param name="Location"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LocationsController.DeleteByLocationIdAsync(System.Int32)">
            <summary>
            Delete data by LocationId
            </summary>
            <param name="LocationId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LogController.AddAsync(DpControl.Domain.Models.LogAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LogController.GetByLogIdAsync(System.Int32)">
            <summary>
            Search data by LogId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LogController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LogController.DeleteByLogIdAsync(System.Int32)">
            <summary>
            Delete data by LogId
            </summary>
            <param name="logId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LogDescriptionController.AddAsync(DpControl.Domain.Models.LogDescriptionAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LogDescriptionController.GetByLogDescriptionIdAsync(System.Int32)">
            <summary>
            Search data by LogDescriptionId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LogDescriptionController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LogDescriptionController.DeleteByLogDescriptionIdAsync(System.Int32)">
            <summary>
            Delete data by LogDescriptionId
            </summary>
            <param name="logDescriptionId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.LogDescriptionController.UpdateAsync(System.Int32,DpControl.Domain.Models.LogDescriptionUpdateModel)">
            <summary>
            Edit data by LogDescriptionId
            </summary>
            <param name="LogDescriptionId"></param>
            <param name="LogDescription"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.ProjectsController.AddAsync(DpControl.Domain.Models.ProjectAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.ProjectsController.GetByProjectIdAsync(System.Int32)">
            <summary>
            Search data by ProjectId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.ProjectsController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.ProjectsController.UpdateAsync(System.Int32,DpControl.Domain.Models.ProjectUpdateModel)">
            <summary>
            Edit data by ProjectId
            </summary>
            <param name="customerNo"></param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.ProjectsController.DeleteByProjectIdIdAsync(System.Int32)">
            <summary>
            Delete data by CustomerNo
            </summary>
            <param name="customerId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.ScenesController.AddAsync(DpControl.Domain.Models.SceneAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.ScenesController.GetBySceneIdAsync(System.Int32)">
            <summary>
            Search data by SceneId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.ScenesController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.ScenesController.UpdateAsync(System.Int32,DpControl.Domain.Models.SceneUpdateModel)">
            <summary>
            Edit data by SceneId
            </summary>
            <param name="SceneId"></param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.ScenesController.DeleteBySceneIdAsync(System.Int32)">
            <summary>
            Delete data by SceneId
            </summary>
            <param name="SceneId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.SceneSegmentsController.AddAsync(DpControl.Domain.Models.SceneSegmentAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.SceneSegmentsController.GetBySceneSegmentIdAsync(System.Int32)">
            <summary>
            Search data by sceneSegmentId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.SceneSegmentsController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.SceneSegmentsController.UpdateAsync(System.Int32,DpControl.Domain.Models.SceneSegmentUpdateModel)">
            <summary>
            Edit data by sceneSegmentId
            </summary>
            <param name="customerNo"></param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.SceneSegmentsController.DeleteBySceneSegmentIdAsync(System.Int32)">
            <summary>
            Delete data by SceneSegmentId
            </summary>
            <param name="customerId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.UserGroupsController.AddAsync(DpControl.Domain.Models.UserGroupAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.UserGroupsController.GetByUserGroupIdAsync(System.Int32)">
            <summary>
            Search data by UserGroupId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.UserGroupsController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.UserGroupsController.DeleteByUserGroupIdAsync(System.Int32)">
            <summary>
            Delete data by UserGroupId
            </summary>
            <param name="userGroupId"></param>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.UserLocationsController.AddAsync(DpControl.Domain.Models.UserLocationAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.UserLocationsController.GetByUserLocationIdAsync(System.Int32)">
            <summary>
            Search data by UserLocationId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.UserLocationsController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Controllers.APIControllers.UserLocationsController.DeleteByUserLocationIdAsync(System.Int32)">
            <summary>
            Delete data by UserLocationId
            </summary>
            <param name="userLocationId"></param>
        </member>
        <member name="M:DpControl.APIControllers.CustomersController.AddAsync(DpControl.Domain.Models.CustomerAddModel)">
            <summary>
            Add data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.APIControllers.CustomersController.GetByCustomerIdAsync(System.Int32)">
            <summary>
            Search data by CustomerId
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:DpControl.APIControllers.CustomersController.GetAllAsync(DpControl.Domain.Models.Query)">
            <summary>
            Search all data
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.APIControllers.CustomersController.UpdateAsync(System.Int32,DpControl.Domain.Models.CustomerUpdateModel)">
            <summary>
            Edit data by CustomerId
            </summary>
            <param name="customerNo"></param>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.APIControllers.CustomersController.DeleteByCustomerIdAsync(System.Int32)">
            <summary>
            Delete data by CustomerNo
            </summary>
            <param name="customerId"></param>
        </member>
        <member name="T:DpControl.Domain.Execptions.ExpectException">
            <summary>
            Expect Exception which use to catch error tip
            </summary>
        </member>
        <member name="P:DpControl.Domain.Models.Query.orderby">
            <summary>
            排序
            格式：orderby=name,price desc/asc
                  orderby=name 
            </summary>
        </member>
        <member name="P:DpControl.Domain.Models.Query.skip">
            <summary>
            跳过前N条
            格式：skip=10
            @"^[1-9]([0-9]*)$|^[0-9]$" 只能是0或正整数
            </summary>
        </member>
        <member name="P:DpControl.Domain.Models.Query.top">
            <summary>
            返回前N条
            格式：top=20
            @"^[1-9]([0-9]*)$|^[0-9]$" 只能是0或正整数
            </summary>
        </member>
        <member name="P:DpControl.Domain.Models.Query.select">
            <summary>
            选中要返回的属性结果
            格式：select = name,price
            </summary>
        </member>
        <member name="P:DpControl.Domain.Models.Query.filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:DpControl.Domain.Models.Query.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:DpControl.Domain.Models.OrderBy.OrderbyField">
            <summary>
            orderby field name
            </summary>
        </member>
        <member name="P:DpControl.Domain.Models.OrderBy.OrderbyBehavior">
            <summary>
            orderby behavior (desc/asc or empty)
            </summary>
        </member>
        <member name="P:DpControl.Domain.Models.Filter.FilterPropertyValue">
            <summary>
            key:PropertyName
            value:PropertyValue
            </summary>
        </member>
        <member name="T:DpControl.Models.ListResponseModel`1">
            <summary>
            返回结果是list的消息构造
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DpControl.Models.SingleResponseModel`1">
            <summary>
            返回结果是单条数据的消息构造
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DpControl.Models.ErrorResponseModel">
            <summary>
            API错误消息构造
            </summary>
        </member>
        <member name="M:DpControl.Utility.Common.ConverValueToType(System.Type,System.Object)">
            <summary>
            Conver object value to Type
            if falied throw exception
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.ModelHandler.ConverEntityToModel``2(System.Collections.Generic.List{``1})">
            <summary>
            Conver Entity To Model
            </summary>
            <typeparam name="M"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.ModelHandler.ConverEntityToModel``2(``1)">
            <summary>
            Conver Entity To Model
            </summary>
            <typeparam name="M"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.ModelHandler.ConverModelToEntity``2(System.Collections.Generic.List{``0})">
            <summary>
            Conver Model To Entity
            </summary>
            <typeparam name="M"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.ModelHandler.ConverModelToEntity``2(``0)">
            <summary>
            Conver Model To Entity
            </summary>
            <typeparam name="M"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.ResponseHandler.ListResponse``1(``0)">
            <summary>
            返回数据是List的消息构造
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.ResponseHandler.SingleResponse``1(``0)">
            <summary>
            返回数据是单条数据的消息构造
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.ResponseHandler.ReturnError(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            返回错误消息
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.UserInfoManager.GetUserInfo">
            <summary>
            Get UserInfo
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.UserInfoManager.GetUserInfoAsync">
            <summary>
            Get UserInfo
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.Authentication.AbstractAuthentication.DoAuthentication(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Do Authentication and return userName;
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.Authentication.AbstractAuthentication.DoAuthenticationAndLogin(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Do Authentication and Login;
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.Authentication.AbstractAuthentication.GetUserInfo(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Get User Info
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:DpControl.Utility.Authentication.APIAuthenticationMiddleware">
            <summary>
            API Authentication 
            </summary>
        </member>
        <member name="T:DpControl.Utility.Authentication.BasicAuthentication">
            <summary>
            
            </summary>
        </member>
        <member name="M:DpControl.Utility.Authentication.BasicAuthentication.InitServices(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            获取依赖注入实例
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="T:DpControl.Utility.Authentication.DigestAuthentication">
            <summary>
            Digest Authentication
            </summary>
        </member>
        <member name="M:DpControl.Utility.Authentication.DigestAuthentication.CheckUserInfo(System.String,Microsoft.AspNet.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DpControl.Utility.Authorization.APIAuthorizationRequirement" -->
        <member name="T:DpControl.Utility.Authorization.APIAuthorizeAttribute">
            <summary>
            Restful web api Authorization 
            </summary>
        </member>
        <member name="M:DpControl.Utility.Authorization.APIAuthorizeAttribute.InitServices(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            获取依赖注入实例
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:DpControl.Utility.ExceptionHandler.GlobalExceptionBuilder.ExceptionBuilder(Microsoft.AspNet.Builder.IApplicationBuilder)">
            <summary>
            判断不同的异常并将不同类型的异常转换为HttpStatusCode
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:DpControl.Utility.ExceptionHandler.GlobalExceptionFilter">
            <summary>
            全局捕获异常
            把异常转换为HTTP消息
            </summary>
        </member>
        <member name="T:DpControl.Utility.Filters.EnableQueryAttribute">
            <summary>
            查询过滤器
            该类允许对Controller取得的结果集进行过滤，排序等查询操作
            </summary>
        </member>
        <member name="M:DpControl.Utility.Filters.EnableQueryAttribute.OnActionExecuted(Microsoft.AspNet.Mvc.Filters.ActionExecutedContext)">
            <summary>
            在controller action执行之后调用 
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:DpControl.Utility.Filters.EnableQueryAttribute.OnActionExecuting(Microsoft.AspNet.Mvc.Filters.ActionExecutingContext)">
            <summary>
            在controller action执行之前调用 
            在方法执行前获取过滤，排序，搜索等查询条件
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:DpControl.Utility.Filters.EnableQueryAttribute.GetSkipParam(System.String)">
            <summary>
            获取skip参数
            </summary>
            <param name="skipString"></param>
        </member>
        <member name="M:DpControl.Utility.Filters.EnableQueryAttribute.GetTopParam(System.String)">
            <summary>
            获取top参数
            </summary>
            <param name="topString"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.Filters.EnableQueryAttribute.GetOrderbyParam(System.String,System.Type)">
            <summary>
            获取orderby参数
            </summary>
            <param name="orderbyString"></param>
            <param name="actionReturnType"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.Filters.EnableQueryAttribute.GetSelectParam(System.String,System.Type)">
            <summary>
            获取select参数
            </summary>
            <param name="orderbyString"></param>
            <param name="actionReturnType"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.Filters.EnableQueryAttribute.GetFilterParam(System.String,System.Type)">
            <summary>
            获取filter参数
            </summary>
            <param name="filterString"></param>
            <param name="actionReturnType"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.Filters.EnableQueryAttribute.OnResultExecuting(Microsoft.AspNet.Mvc.Filters.ResultExecutingContext)">
            <summary>
            在controller action result执行之前调用 
            获取返回结果后，对结果进行过滤，排序，搜索等操作
            </summary>
            <param name="context"></param>
            
        </member>
        <member name="M:DpControl.Utility.Filters.EnableQueryAttribute.OrderByResult(System.Collections.IList,DpControl.Domain.Models.OrderBy)">
            <summary>
            对查询结果进行排序
            </summary>
            <param name="listData"></param>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.Filters.EnableQueryAttribute.PageResult(System.Collections.IList,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            对结果进行分页
            </summary>
            <returns></returns>
        </member>
        <member name="M:DpControl.Utility.Filters.EnableQueryAttribute.CreateList(System.Type,System.Type,System.Object[])">
            <summary>
            根据类型，生成实例
            </summary>
            <param name="genericType"></param>
            <param name="innerType"></param>
            <param name="args">实例值</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DpControl.Utility.Filters.EnableQueryAttribute.GetActionReturnType``1(``0)" -->
        <member name="M:DpControl.Utility.Filters.EnableQueryAttribute.GetClassType(System.Type)">
            <summary>
            获取Class类型
            </summary>
            <param name="converType"></param>
            <returns></returns>
        </member>
        <member name="T:DpControl.Utility.Filters.FormatReturnTypeAttribute">
            <summary>
            格式化List数据返回类型
            </summary>
        </member>
        <member name="M:DpControl.Utility.Filters.FormatReturnTypeAttribute.OnResultExecuting(Microsoft.AspNet.Mvc.Filters.ResultExecutingContext)">
            <summary>
            在controller action result执行之前调用 
            统一数据返回类型
            </summary>
            <param name="context"></param>
            
        </member>
        <member name="T:DpControl.Utility.Middlewares.XHttpHeaderOverrideMiddleware">
            <summary>
            允许通过POST方法覆盖http方法
            </summary>
        </member>
    </members>
</doc>
